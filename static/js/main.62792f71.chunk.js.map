{"version":3,"sources":["CorrectWords.tsx","SelectedLetters.tsx","App.tsx","shuffle.ts","index.tsx"],"names":["props","useState","open","setOpen","words","length","ListGroup","Item","remainingWords","slice","console","log","remaining","map","word","key","onClick","required","divs","selected","s","index","className","pangram","pangrams","Math","floor","random","letters","array","i","j","shuffle","Array","from","Set","split","values","letter","toUpperCase","requiredLetter","pop","splice","selectedLetters","setLetters","correctWords","setCorrectWords","Container","fluid","Row","Col","width","height","viewBox","size","x","y","flat","spacing","origin","q","r","Button","disabled","containsRequired","indexOf","validWord","toLowerCase","checkWord","join","CorrectWords","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62792f71.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nexport interface CorrectWordProps {\n    words: string[]\n}\n\nexport default function (props: CorrectWordProps) {\n    const [open, setOpen] = useState(false);\n\n    const { words } = props;\n    if (words.length === 0) {\n        return (\n            <ListGroup>\n                <ListGroup.Item>No words found yet</ListGroup.Item>\n            </ListGroup>\n        );\n    }\n    \n    const remainingWords = words.slice(1);\n    console.log({ words, open, remainingWords});\n    const remaining = remainingWords.map(word => <ListGroup.Item key={word}>{word}</ListGroup.Item>);\n    return (\n        <ListGroup>\n            <ListGroup.Item onClick={() => setOpen(!open)}>\n                {words[0]}\n            </ListGroup.Item>\n            {open && remaining}\n        </ListGroup>\n    );\n}","import React from 'react';\nimport './SelectedLetters.css';\n\nexport interface SelectedLettersProps {\n    required: string\n    selected: string[]\n}\n\nexport default function (props: SelectedLettersProps) {\n    const { required, selected } = props;\n    const divs = selected\n        .map((s, index) => \n            <span key={`${s}-${index}`} className={s === required ? 'required': ''}>{s}</span>\n        );\n    return (\n        <div className='selected text-center'>\n           {divs} \n        </div>\n    );\n}","import React, { useState } from 'react';\nimport './App.css';\nimport pangrams from './words/pangrams.json';\nimport { HexGrid, Layout, Hexagon, Text } from 'react-hexgrid';\nimport shuffle from './shuffle';\nimport words from './words/words.json';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport CorrectWords from './CorrectWords';\nimport SelectedLetters from './SelectedLetters';\n\n\nconst pangram = pangrams[Math.floor(Math.random() * pangrams.length)];\nlet letters = shuffle(\n  Array.from(\n    new Set<string>(pangram.split('')).values()\n  ).map(letter => letter.toUpperCase())\n);\nconst requiredLetter = letters.pop();\nletters = letters.splice(0);\n\nexport default function () {\n\n  const [selectedLetters, setLetters] = useState<string[]>([]);\n  const [correctWords, setCorrectWords] = useState<string[]>([]);\n\n  const checkWord = (word: string) => {\n    const containsRequired = word.indexOf(requiredLetter) >= 0;\n    const validWord = words.indexOf(word.toLowerCase()) >= 0;\n    console.log({ containsRequired, validWord });\n    if (containsRequired && validWord) {\n      setCorrectWords([...correctWords, word]);\n    }\n    setLetters([]);\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <SelectedLetters selected={selectedLetters} required={requiredLetter}/>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <HexGrid width=\"100%\" height=\"350px\" viewBox=\"-1 -30 1 60\">\n            <Layout size={{ x: 10, y: 10 }} flat={true} spacing={1.1} origin={{ x: 0, y: 0 }}>\n              <Hexagon q={0} r={0} s={0} onClick={() => setLetters([...selectedLetters, requiredLetter])}>\n                <Text>{requiredLetter}</Text>\n              </Hexagon>\n\n              <Hexagon q={0} r={-1} s={1} onClick={() => setLetters([...selectedLetters, letters[0]])}>\n                <Text>{letters[0]}</Text>\n              </Hexagon>\n              <Hexagon q={0} r={1} s={-1} onClick={() => setLetters([...selectedLetters, letters[1]])}>\n                <Text>{letters[1]}</Text>\n              </Hexagon>\n              <Hexagon q={1} r={-1} s={0} onClick={() => setLetters([...selectedLetters, letters[2]])}>\n                <Text>{letters[2]}</Text>\n              </Hexagon>\n\n              <Hexagon q={1} r={0} s={-1} onClick={() => setLetters([...selectedLetters, letters[3]])}>\n                <Text>{letters[3]}</Text>\n              </Hexagon>\n              <Hexagon q={-1} r={1} s={0} onClick={() => setLetters([...selectedLetters, letters[4]])}>\n                <Text>{letters[4]}</Text>\n              </Hexagon>\n              <Hexagon q={-1} r={0} s={1} onClick={() => setLetters([...selectedLetters, letters[5]])}>\n                <Text>{letters[5]}</Text>\n              </Hexagon>\n            </Layout>\n          </HexGrid>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"d-flex justify-content-center\">\n          <Button onClick={() => setLetters([])} disabled={selectedLetters.length === 0}>Clear</Button>\n        </Col>\n        <Col className=\"d-flex justify-content-center\">\n          <Button onClick={() => {setLetters(selectedLetters.slice(0, -1));}} disabled={selectedLetters.length === 0}>Delete</Button>\n        </Col>\n        <Col className=\"d-flex justify-content-center\">\n          <Button onClick={() => checkWord(selectedLetters.join(''))} disabled={!(selectedLetters.length > 3 && selectedLetters.indexOf(requiredLetter) >= 0)}>Submit</Button>\n        </Col>\n      </Row>\n      <Row className=\"pt-4\">\n        <Col>\n          <CorrectWords words={correctWords} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}","export default function (array: any[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}